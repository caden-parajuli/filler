package main
import "testing"

func TestDiamondBoardMovePlayer0(t *testing.T) {
	board := Board {
		Diamonds: true,
		NumRows: 15,
		NumCols: 30,
		Data: [][]Color{
            {1, 0, 2, 2, 0, 6, 0, 6, 3, 2, 3, 4, 3, 3, 0, 5, 2, 3, 6, 4, 5, 5, 6, 3, 1, 6, 1, 2, 6, 5},
	          {5, 0, 2, 1, 1, 2, 2, 4, 4, 0, 2, 2, 2, 6, 1, 1, 3, 2, 4, 5, 1, 2, 6, 1, 3, 3, 4, 0, 6},
	        {3, 6, 3, 6, 0, 4, 5, 5, 2, 4, 0, 4, 5, 0, 0, 6, 5, 5, 4, 0, 1, 4, 2, 4, 6, 3, 4, 3, 0, 3},
	          {5, 5, 0, 1, 5, 2, 3, 1, 6, 5, 4, 3, 2, 3, 4, 0, 6, 1, 0, 3, 3, 1, 0, 5, 3, 3, 6, 2, 2},
	        {3, 5, 4, 0, 5, 6, 6, 5, 2, 2, 1, 5, 5, 0, 3, 0, 2, 3, 6, 3, 4, 4, 2, 0, 2, 3, 6, 2, 6, 3},
	          {4, 2, 3, 5, 1, 0, 6, 6, 3, 0, 4, 4, 1, 2, 6, 0, 3, 6, 0, 2, 1, 4, 3, 3, 4, 3, 1, 0, 6},
	        {2, 1, 3, 1, 4, 5, 1, 5, 3, 6, 1, 2, 3, 2, 2, 6, 4, 2, 0, 4, 3, 5, 5, 2, 4, 3, 4, 0, 1, 6},
	          {0, 5, 6, 2, 4, 4, 6, 1, 1, 3, 5, 0, 4, 0, 2, 6, 0, 1, 1, 3, 0, 2, 3, 0, 6, 2, 3, 2, 3},
	        {3, 5, 1, 5, 4, 1, 2, 0, 1, 2, 6, 5, 3, 1, 0, 2, 0, 4, 5, 6, 0, 6, 1, 3, 6, 5, 3, 5, 3, 2},
	          {0, 1, 1, 4, 5, 0, 2, 4, 3, 0, 5, 6, 0, 0, 4, 0, 4, 6, 6, 4, 4, 0, 0, 2, 0, 2, 0, 6, 4},
	        {6, 4, 1, 4, 1, 2, 2, 0, 4, 3, 4, 6, 0, 0, 2, 3, 3, 3, 2, 6, 1, 5, 3, 2, 6, 6, 2, 2, 1, 5},
	          {2, 3, 3, 1, 3, 2, 4, 3, 0, 4, 5, 6, 2, 6, 6, 4, 5, 5, 0, 5, 1, 0, 3, 4, 4, 0, 0, 4, 6},
	        {4, 4, 3, 1, 3, 4, 2, 2, 3, 6, 5, 4, 6, 3, 5, 2, 6, 1, 3, 3, 4, 5, 2, 0, 1, 4, 4, 5, 5, 4},
	          {3, 3, 2, 3, 1, 0, 5, 2, 1, 5, 1, 3, 2, 6, 6, 4, 1, 1, 4, 5, 6, 4, 3, 5, 2, 3, 4, 5, 4},
	        {3, 3, 3, 3, 6, 2, 1, 2, 0, 2, 3, 4, 6, 3, 1, 4, 3, 4, 3, 2, 6, 1, 3, 2, 6, 1, 3, 2, 2, 3},
		},
	}

	board.ChangePlayerColor(0, 1)

	// This is what board should be now:
	newShouldBe := Board {
		Diamonds: true,
		NumRows: 15,
		NumCols: 30,
		Data: [][]Color{
            {1, 0, 2, 2, 0, 6, 0, 6, 3, 2, 3, 4, 3, 3, 0, 5, 2, 3, 6, 4, 5, 5, 6, 3, 1, 6, 1, 2, 6, 5},
	          {5, 0, 2, 1, 1, 2, 2, 4, 4, 0, 2, 2, 2, 6, 1, 1, 3, 2, 4, 5, 1, 2, 6, 1, 3, 3, 4, 0, 6},
	        {3, 6, 3, 6, 0, 4, 5, 5, 2, 4, 0, 4, 5, 0, 0, 6, 5, 5, 4, 0, 1, 4, 2, 4, 6, 3, 4, 3, 0, 3},
	          {5, 5, 0, 1, 5, 2, 3, 1, 6, 5, 4, 3, 2, 3, 4, 0, 6, 1, 0, 3, 3, 1, 0, 5, 3, 3, 6, 2, 2},
	        {3, 5, 4, 0, 5, 6, 6, 5, 2, 2, 1, 5, 5, 0, 3, 0, 2, 3, 6, 3, 4, 4, 2, 0, 2, 3, 6, 2, 6, 3},
	          {4, 2, 3, 5, 1, 0, 6, 6, 3, 0, 4, 4, 1, 2, 6, 0, 3, 6, 0, 2, 1, 4, 3, 3, 4, 3, 1, 0, 6},
	        {2, 1, 3, 1, 4, 5, 1, 5, 3, 6, 1, 2, 3, 2, 2, 6, 4, 2, 0, 4, 3, 5, 5, 2, 4, 3, 4, 0, 1, 6},
	          {0, 5, 6, 2, 4, 4, 6, 1, 1, 3, 5, 0, 4, 0, 2, 6, 0, 1, 1, 3, 0, 2, 3, 0, 6, 2, 3, 2, 3},
	        {3, 5, 1, 5, 4, 1, 2, 0, 1, 2, 6, 5, 3, 1, 0, 2, 0, 4, 5, 6, 0, 6, 1, 3, 6, 5, 3, 5, 3, 2},
	          {0, 1, 1, 4, 5, 0, 2, 4, 3, 0, 5, 6, 0, 0, 4, 0, 4, 6, 6, 4, 4, 0, 0, 2, 0, 2, 0, 6, 4},
	        {6, 4, 1, 4, 1, 2, 2, 0, 4, 3, 4, 6, 0, 0, 2, 3, 3, 3, 2, 6, 1, 5, 3, 2, 6, 6, 2, 2, 1, 5},
	          {2, 3, 1, 1, 3, 2, 4, 3, 0, 4, 5, 6, 2, 6, 6, 4, 5, 5, 0, 5, 1, 0, 3, 4, 4, 0, 0, 4, 6},
	        {4, 4, 1, 1, 3, 4, 2, 2, 3, 6, 5, 4, 6, 3, 5, 2, 6, 1, 3, 3, 4, 5, 2, 0, 1, 4, 4, 5, 5, 4},
	          {1, 1, 2, 1, 1, 0, 5, 2, 1, 5, 1, 3, 2, 6, 6, 4, 1, 1, 4, 5, 6, 4, 3, 5, 2, 3, 4, 5, 4},
	        {1, 1, 1, 3, 6, 2, 1, 2, 0, 2, 3, 4, 6, 3, 1, 4, 3, 4, 3, 2, 6, 1, 3, 2, 6, 1, 3, 2, 2, 3},
		},
	}

	if (board.Diamonds != newShouldBe.Diamonds || board.NumRows != newShouldBe.NumRows || board.NumCols != newShouldBe.NumCols) {
		t.Error("ERROR: Board parameters different!")
	}

	for i, row := range board.Data {
		for j, diamond := range row {
	        if diamond != newShouldBe.Data[i][j] {
				t.Error("ERROR: Boards not equal!")
			}
		}
	}
}
